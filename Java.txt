JAVA
        (1) Java has a class name which must match the file name
        (2)Every program must contain the main() function method.   
   
  Example No.1:
    public class Main {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }
}

N.B. 
•	The curly braces {} marks the beginning and the end of a block of code. System is a built-in Java class that contains useful members, such as out, which is short for "output". The println() method, short for "print line", is used to print a value to the screen (or a file).
•	each code statement must end with a semicolon (;).

Comments
Multi-line comments start with /* and ends with */.
Form of syntax
type variableName = value;

Type Casting  
•	Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double

•	Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte



Assignment Operators

Operator	Example	
=   x = 5	x = 5	

+=	x += 3	x = x + 3	

-=	x -= 3	x = x - 3	

*=	x *= 3	x = x * 3	

/=	x /= 3	x = x / 3	

%=	x %= 3	x = x % 3	

&=	x &= 3	x = x & 3	

|=	x |= 3	x = x | 3	

^=	x ^= 3	x = x ^ 3	

>>=	x >>= 3	x = x >> 3	

<<=	x <<= 3	x = x << 3	


Comparison Operators

Operator	Name	
==	Equal to	x == y	

!=	Not equal	x != y	

>	Greater than	x > y	

<	Less than	x < y	

>=	Greater than or equal to	x >= y	

<=	Less than or equal to	x <= y	





Logical Operators 

Operator	Name	
&& 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	

|| 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	

!	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)	


Examples:

(1)Array

public class tt {
  public static void main(String[] args) {
  int a [] = new int[5];
  a [0] = 10;
  a[1] = 20;
  a[2] = 70;
  a[3] = 40;
  a[4] = 50;

  for (int i = 0; i < a.length; i++)
  System.out.println(a[i]);


  
  
  }

}


(2)

class tt {

static void min1(int arr[]){
    int min1 = arr[0];
    for(int i = 1; i < arr.length; i++)
    if(min1 > arr[i])
    min1 = arr[i];
System.out.println(min1);
}
public static void main(String[] args) {

int a[] = {33,3,4,5};
min1(a);

 }


}

(3) While loop 

// while loop 

public class tt {
public static void main(String[] args) {
int x = 10;

while(x < 100) {
    System.out.print("value of x: " + x);
    x++;
    System.out.print("\n");
}

}
}
(4) if loop 



public class tt {
    public static void main(String[] args) {
     
        int [] numbers = {10,20,30,40,50};

        for (int x : numbers) 
        {

            if (x == 30)
        {
            continue;
        }
        System.out.println(x);
        System.out.println("\n");
        }
    
    }
}

(5) Java Implementation of recursive Binary Search 

public class tt {
   int bS(int arr[],int l,int r,int x)
{
  if(r >= l)
  {
    int mid = l + (r-l)/2;
    if(arr[mid] == x)
    return mid;

    if(arr[mid] > x)
    return bS(arr, l, mid-l, x);
    return bS(arr, mid + l,r,x);
  }
  return -1;

}


    public static void main(String[] args) {
        tt ob = new tt();
    int arr[] = {2,3,4,10,40};
    int n = arr.length;
    int x = 10;
    int result = ob.bS(arr,0,n-1,x);
    if (result == -1)
      System.out.println("Element is not present.");
    else
      System.out.println("Element found at index " + result);
      

     
    
    }
}
(6) BubbleSort program
public class tt {
  static void bubbleSort(int[] arr){
    int n = arr.length;
    int temp = 0;
    for ( int i = 0; i < n; i++) {
        for(int j = 1; j < (n - i); j++){
            if ( arr[j-1] > arr[j]) {

                temp = arr[j-1];
                arr[j-1] = arr[j];
                arr[j] = temp;
            }
        }
    }
  }    
    
 public static void main(String[] args) {
    int arr[] = {3,60,35,2,45,320,5};
    System.out.println("Array Before");
    for (int i = 0; i < arr.length; i++){
        System.out.print(arr[i] + " ");
    }
    System.out.println();

    bubbleSort(arr);

    System.out.println("Array After");
    for (int i = 0; i < arr.length; i ++) {
        System.out.print(arr[i] + " ");
    }
  }
}

(7) Binary Search Tree (BST)

// Java program to convert a left unbalanced BST to a balanced BST

import java.util.*;

/* A binary tree node has data, pointer to left child
and a pointer to right child */
class Node
{
	int data;
	Node left, right;

	public Node(int data)
	{
		this.data = data;
		left = right = null;
	}
}

class BinaryTree
{
	Node root;

	/* This function traverse the skewed binary tree and
	stores its nodes pointers in vector nodes[] */
	void storeBSTNodes(Node root, Vector<Node> nodes)
	{
		// Base case
		if (root == null)
			return;

		// Store nodes in Inorder (which is sorted
		// order for BST)
		storeBSTNodes(root.left, nodes);
		nodes.add(root);
		storeBSTNodes(root.right, nodes);
	}

	/* Recursive function to construct binary tree */
	Node buildTreeUtil(Vector<Node> nodes, int start,
			int end)
	{
		// base case
		if (start > end)
			return null;

		/* Get the middle element and make it root */
		int mid = (start + end) / 2;
		Node node = nodes.get(mid);

		/* Using index in Inorder traversal, construct
		left and right subtress */
		node.left = buildTreeUtil(nodes, start, mid - 1);
		node.right = buildTreeUtil(nodes, mid + 1, end);

		return node;
	}

	// This functions converts an unbalanced BST to
	// a balanced BST
	Node buildTree(Node root)
	{
		// Store nodes of given BST in sorted order
		Vector<Node> nodes = new Vector<Node>();
		storeBSTNodes(root, nodes);

		// Constructs BST from nodes[]
		int n = nodes.size();
		return buildTreeUtil(nodes, 0, n - 1);
	}

	/* Function to do preorder traversal of tree */
	void preOrder(Node node)
	{
		if (node == null)
			return;
		System.out.print(node.data + " ");
		preOrder(node.left);
		preOrder(node.right);
	}

	// Driver program to test the above functions
	public static void main(String[] args)
	{
		/* Constructed skewed binary tree is
				10
			/
			8
			/
			7
		/
		6
		/
		5 */
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(10);
		tree.root.left = new Node(8);
		tree.root.left.left = new Node(7);
		tree.root.left.left.left = new Node(6);
		tree.root.left.left.left.left = new Node(5);

		tree.root = tree.buildTree(tree.root);
		System.out.println("Preorder traversal of balanced BST is :");
		tree.preOrder(tree.root);
	}
}

(8)
public class Demo {
	public static void main(String[] args)
	{
		// byte type
		byte b = 20;
		System.out.println("b= " + b);

		// short type
		short s = 20;
		System.out.println("s= " + s);

		// int type
		int i = 20;
		System.out.println("i= " + i);

		// long type
		long l = 20;
		System.out.println("l= " + l);
	}
}












